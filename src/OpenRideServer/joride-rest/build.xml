<project name="joride-rest" default="build">

	<!--****  ******************************************  ****-->
	<!--****   Buildfile for joride-rest webapp          ****-->
	<!--**** ******************************************** ****-->


	
	<property environment="env" />
	<property file="build.properties" />
	<property file="${app}/tomcat.properties" />
	<property name="appdir" value="${basedir}" />
	<property name="build.dir" value="${appdir}/build" />
	<property name="web-inf.dir" value="${build.dir}/WEB-INF" />
	<property name="dist.dir" value="${appdir}/dist" />
	<property name="warfile" value="${dist.dir}/${ant.project.name}.war" />

	<path id="classpath">
		<fileset dir="${appdir}">
			<include name="lib/build/*.jar" />
		</fileset>

                <!-- include jars  below lib -->
                <fileset dir="./lib">
			<include name="*.jar" />
                </fileset>


		<!-- include classes from ejb project -->
		<pathelement location="../OpenRideServer-ejb/dist/OpenRideServer-ejb.jar" />

		<!-- external jars from ejb project  -->
		<fileset dir="../OpenRideServer-ejb/libs/">
			<include name="*.jar" />
		</fileset>

		<!-- include jee libs from some glassfish -->

		<fileset dir="../OpenRideShareMaster/build.headless.support/jee/libs.glassfish.3.0.2/">
			<include name="*.jar" />
		</fileset>

	</path>



	<!-- *********************************************************************************** -->
	<!-- ***  directories needed for synchonizing and cleaning                           *** -->
	<!-- ***  directory where the joride project lives and where things are copied from  *** -->

	<property name="joride.dir" value="../joride/" />
	<!-- webdir of this project -->
	<property name="web.dir" value="${appdir}/web" />
	<!-- webdir of joride project -->
	<property name="joride.web.dir" value="${joride.dir}/web" />
	<!-- all the resources (javascript, images, css)  will be imported from joride-->
	<property name="resources.dir" value="${web.dir}/resources/" />
	<!-- all the jfaces templates and sections will be imported from joride -->
	<property name="templates.dir" value="${web.dir}/templates/" />
	<!-- all the jfaces sections/fragments will be imported from joride -->
	<property name="sections.dir" value="${web.dir}/sections/joride/" />

	<!-- web/public/ dir  be imported from joride -->
	<property name="web.public.dir" value="${web.dir}/public/" />




	<!-- source directory for joride-public -->
	<property name="src.dir" value="${appdir}/src" />
	<!-- source dir of joride project -->
	<property name="joride.src.dir" value="${joride.dir}/src" />


	<!-- lib directory for joride-public -->
	<property name="lib.dir" value="${appdir}/lib" />
	<!-- webdir of joride project -->
	<property name="joride.lib.dir" value="${joride.dir}/lib" />







	<target name="synchronize" description="Synchronize with joride project">


		<!-- copy joride.jar from joride main project -->
		<copy todir="${lib.dir}">
			<fileset file="${joride.dir}/dist/joride.jar" />
		</copy>


	</target>
	<!-- end of "synchronize target" -->



	<target name="prepare" depends="synchronize" description="Create build and dist directory.">
		<delete dir="${build.dir}" />

		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/WEB-INF" />
		<mkdir dir="${build.dir}/WEB-INF/classes" />
		<mkdir dir="${dist.dir}" />


		<copy todir="${build.dir}" failonerror="true" verbose="true">
			<fileset dir="${appdir}/WebContent" />
		</copy>



		<copy todir="${build.dir}/WEB-INF" failonerror="false" verbose="true">
			<fileset dir="${appdir}">
				<include name="lib/**" />
			</fileset>
		</copy>

	</target>



	<target name="compile" depends="prepare" description="Compile source files.">

		<javac srcdir="${appdir}/src/java" destdir="${web-inf.dir}/classes" debug="true" includeantruntime="false" deprecation="true">
			<compilerarg value="-Xlint:unchecked" />
			<include name="**/*.java" />
			<classpath refid="classpath" />
		</javac>
	</target>




	<target name="war" depends="clean,prepare,compile" description="Build WAR file.">
		<delete file="${warfile}" />
		<jar jarfile="${warfile}" basedir="${build.dir}" />
	</target>


	<target name="build" depends="war" description="build the binaries">

	</target>

	<target name="dist" depends="build" description="create the distributables, but do not deploy">

	</target>




	<target name="install" depends="build" description="Deploy web application.">
		<copy file="${warfile}" todir="${deploy.dir}" />
	</target>

	<target name="clean" description="Clean everything.">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />

	</target>
</project>



